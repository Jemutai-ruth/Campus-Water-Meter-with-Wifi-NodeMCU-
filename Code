#include "FirebaseESP8266.h"  
#include <Arduino.h>
#include <ArduinoJson.h>
#include <EEPROM.h>
#define USE_SERIAL Serial
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>

//replace ***** with your link and firebase private key respectively
#define FIREBASE_HOST"****"
#define FIREBASE_AUTH"****"


// Variable initialization
const int flowmeterPin = D2; // variable for D2 pin
const int ledPin = D7;
//char push_data[200]; //string used to send info to the server
//int addr = 0; //endereço eeprom
byte sensorInterrupt = 0; // 0 = digital pin 2

// The hall-effect flow sensor outputs approximately 4.5 pulses per second per
// litre/minute of flow.
float calibrationFactor = 4.5;

volatile byte pulseCount;

float flowRate;
unsigned int CurrentLiquidFlowing;
unsigned long totalMilliLitres;
unsigned long totalLitres;

unsigned long oldTime;
int addr = 0;

//replace the **** with your ssid and password
const char * ssid = "****";
const char * password = "****";

FirebaseData;
FirebaseData ledData;

FirebaseJson json;


//HTTP client init
HTTPClient http;
void ICACHE_RAM_ATTR pulseCounter() {
  pulseCount++;
  Serial.print("+");
}

void startWIFI(void) {
  digitalWrite(ledPin, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(100);

  WiFi.begin(ssid, password); // Connect to the network
  Serial.print("Connecting to ");
  Serial.print(ssid);
  Serial.println(" ...");
  oldTime = 0;
  int i = 0;
  digitalWrite(ledPin, LOW);    // turn the LED off by making the voltage LOW
  delay(100);

  while (WiFi.status() != WL_CONNECTED) { // Wait for the Wi-Fi to connect
    digitalWrite(ledPin, HIGH);   // turn the LED on (HIGH is the voltage level)
    delay(2000);
    Serial.print(++i);
    Serial.print('.');
    digitalWrite(ledPin, LOW);    // turn the LED off by making the voltage LOW
    delay(100);
  }
  delay(2000);
  Serial.print('\n');
  Serial.print("Connection established!");
  Serial.print("IP address:\t");
  Serial.print(WiFi.localIP()); // Send the IP address of the ESP8266 to the computer

  
}
void setup() {
    Serial.begin(115200);
  EEPROM.begin(512);
  delay(10);
  Serial.println('\n');

startWIFI();

  // Initialization of the variable “buttonPin” as INPUT (D2 pin)
  pinMode(flowmeterPin, INPUT);

  // Two types of blinking
  // 1: Connecting to Wifi
  // 2: Push data to the cloud
  pinMode(ledPin, OUTPUT);

  pulseCount = 0;
  flowRate = 0.0;
  CurrentLiquidFlowing = 0;
  totalMilliLitres = 0;
  
  oldTime = 0;

  digitalWrite(flowmeterPin, HIGH);
  attachInterrupt(digitalPinToInterrupt(flowmeterPin), pulseCounter, FALLING);

}

void loop() {


  
  if (WiFi.status() == WL_CONNECTED && (millis() - oldTime) > 1000) // Only process counters once per second
  {
    // Disable the interrupt while calculating flow rate and sending the value to
    // the host
    detachInterrupt(sensorInterrupt);

    // Because this loop may not complete in exactly 1 second intervals we calculate
    // the number of milliseconds that have passed since the last execution and use
    // that to scale the output. We also apply the calibrationFactor to scale the output
    // based on the number of pulses per second per units of measure (litres/minute in
    // this case) coming from the sensor.
    flowRate = ((1000.0 / (millis() - oldTime)) * pulseCount) / calibrationFactor;

    // Note the time this processing pass was executed. Note that because we've
    // disabled interrupts the millis() function won't actually be incrementing right
    // at this point, but it will still return the value it was set to just before
    // interrupts went away.
    oldTime = millis();

    // Divide the flow rate in litres/minute by 60 to determine how many litres have
    // passed through the sensor in this 1 second interval, then multiply by 1000 to
    // convert to millilitres.
    CurrentLiquidFlowing = (flowRate / 60) * 1000;

    // Add the millilitres passed in this second to the cumulative total
    totalMilliLitres += CurrentLiquidFlowing;

    unsigned int frac;

    // Print the flow rate for this second in litres / minutezz
    Serial.print("Flow rate: ");
    Serial.print(int(flowRate)); // Print the integer part of the variable
    Serial.print("."); // Print the decimal point
    // Determine the fractional part. The 10 multiplier gives us 1 decimal place.
    frac = (flowRate - int(flowRate)) * 10;
    Serial.print(frac, DEC); // Print the fractional part of the variable
    Serial.print("L/min");
    // Print the number of litres flowed in this second
    Serial.print("  Current Liquid Flowing: "); // Output separator
    Serial.print(CurrentLiquidFlowing);
    Serial.print("mL/Sec");

    // Print the cumulative total of litres flowed since starting
    Serial.print("  Output Liquid Quantity: "); // Output separator
    Serial.print(totalMilliLitres);
    Serial.println("mL");
    

    if (flowRate > 0) {
      digitalWrite(ledPin, HIGH);   // turn the LED on (HIGH is the voltage level)
      delay(14400000);

     if (Firebase.pushFloat(firebaseData, "/FirebaseIOT/flowRate", flowRate))
  {
    Serial.println("PASSED");
    Serial.println("PATH: " + firebaseData.dataPath());
    Serial.println("TYPE: " + firebaseData.dataType());
    Serial.println("ETag: " + firebaseData.ETag());
    Serial.println("------------------------------------");
    Serial.println();
    
  }
  else
  {
    Serial.println("FAILED");
    Serial.println("REASON: " + firebaseData.errorReason());
    Serial.println("------------------------------------");
    Serial.println();
  }

  if (Firebase.pushFloat(firebaseData, "/FirebaseIOT/CurrentVolumeofLiquidFlowing", CurrentLiquidFlowing))
  {
    Serial.println("PASSED");
    Serial.println("PATH: " + firebaseData.dataPath());
    Serial.println("TYPE: " + firebaseData.dataType());
    Serial.println("ETag: " + firebaseData.ETag());
    Serial.println("------------------------------------");
    Serial.println();
  }
  else
  {
    Serial.println("FAILED");
    Serial.println("REASON: " + firebaseData.errorReason());
    Serial.println("------------------------------------");
    Serial.println();
  }
  if (Firebase.pushFloat(firebaseData, "/FirebaseIOT/TotalVolume", totalMilliLitres))
  {
    Serial.println("PASSED");
    Serial.println("PATH: " + firebaseData.dataPath());
    Serial.println("TYPE: " + firebaseData.dataType());
    Serial.println("ETag: " + firebaseData.ETag());
    Serial.println("------------------------------------");
    Serial.println();
  }
  else
  {
    Serial.println("FAILED");
    Serial.println("REASON: " + firebaseData.errorReason());
    Serial.println("------------------------------------");
    Serial.println();
  }
}
    // Reset the pulse counter so we can start incrementing again
    pulseCount = 0;

    // Enable the interrupt again now that we've finished sending output
    attachInterrupt(sensorInterrupt, pulseCounter, FALLING);
  } else if (WiFi.status() != WL_CONNECTED) {
    startWIFI();
  }
  Firebase.begin(FIREBASE_HOST,FIREBASE_AUTH);
}
